import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as r}from"./app-jr09F59J.js";const c={},p=r('<h1 id="defer和async什么区别" tabindex="-1"><a class="header-anchor" href="#defer和async什么区别"><span>defer和async什么区别</span></a></h1><p>按照惯例，所有 script 元素都应该放在页面的 head 元素中。这种做法的目的就是把所有外部文件 (css 文件和 <a href="https://so.csdn.net/so/search?q=JavaScript&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">JavaScript</a> 文件) 的引用都放在相同的地方。可是，在文档的 head 元素中包含所有 JavaScript 文件，意味着必须等到全部 JavaScript 代码都被下载，解析和执行完成以后，才能开始呈现页面的内容 (浏览器在遇到 body 标签时才开始呈现内容)</p><p>对于那些需要很多 JavaScript 代码的页面来说，这无疑会导致浏览器在呈现页面出现明显的延迟，而延迟期间的浏览器窗口中将是一片空白。为了避免这个问题。<strong>现在 Web 应用程序一般都全部 JavaScript 引用放在 body 元素中页面的内容后面</strong>。这样一来，在解析包含的 JavaScript 代码之前，页面的内容将完全呈现在浏览器中。而用户也会因为浏览器窗口显示空白页面的时间缩短而感到打开页面的速度加快了。</p><p>有了 defer 和 async 后，这种局面得到了改善。</p><p><strong>defer</strong>(延迟脚本)</p><p>延迟脚本：defer 属性只适用于外部脚本文件。</p><p>如果给了 script 标签定义了 defer 属性，这个属性的作用是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，如果 script 元素中设置了 defer 属性，相当于告诉浏览器立即下载，但延迟执行。</p><p><strong>async</strong>(异步脚本)</p><p>异步脚本：async 属性也只适用于外部脚本文件，并告诉浏览器立即下载文件。</p><p>但与 <strong>defer</strong> 不同的是：标记为 async 的脚本并不保证按照指定它们的先后顺序执行。</p><p>所以总结起来，两者之间最大的差异就是在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的。</p><p>defer 是立即下载但延迟执行，加载后续文档元素的过程将和脚本的加载并行进行 (异步)，但是脚本的执行要在所有元素解析完成之后，DOMContentLoaded 时间触发之前完成。async 是立即下载并执行，加载和渲染后续文档元素的过程将和 js 脚本的加载与执行并行进行 (异步)。</p>',12),o=[p];function n(s,i){return a(),t("div",null,o)}const y=e(c,[["render",n],["__file","defer和async什么区别.html.vue"]]),h=JSON.parse('{"path":"/study/7.Javascript/defer%E5%92%8Casync%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html","title":"defer和async什么区别","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-11T00:00:00.000Z","category":["JavaScript"],"tag":["JavaScript","defer","async"],"description":"defer和async什么区别 按照惯例，所有 script 元素都应该放在页面的 head 元素中。这种做法的目的就是把所有外部文件 (css 文件和 JavaScript 文件) 的引用都放在相同的地方。可是，在文档的 head 元素中包含所有 JavaScript 文件，意味着必须等到全部 JavaScript 代码都被下载，解析和执行完成以后，...","head":[["meta",{"property":"og:url","content":"https://github.com/tommmmya/Tommya-Blog/study/7.Javascript/defer%E5%92%8Casync%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"Tommya 个人博客"}],["meta",{"property":"og:title","content":"defer和async什么区别"}],["meta",{"property":"og:description","content":"defer和async什么区别 按照惯例，所有 script 元素都应该放在页面的 head 元素中。这种做法的目的就是把所有外部文件 (css 文件和 JavaScript 文件) 的引用都放在相同的地方。可是，在文档的 head 元素中包含所有 JavaScript 文件，意味着必须等到全部 JavaScript 代码都被下载，解析和执行完成以后，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T07:56:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Tommya"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:tag","content":"defer"}],["meta",{"property":"article:tag","content":"async"}],["meta",{"property":"article:published_time","content":"2024-03-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T07:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"defer和async什么区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-29T07:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Tommya\\",\\"url\\":\\"https://github.com/tommmmya\\"}]}"]]},"headers":[],"git":{"createdTime":1728989573000,"updatedTime":1730188564000,"contributors":[{"name":"tangmao02","email":"tangmao02@meituan.com","commits":2}]},"readingTime":{"minutes":2.21,"words":662},"filePathRelative":"study/7.Javascript/defer和async什么区别.md","localizedDate":"2024年3月11日","excerpt":"\\n<p>按照惯例，所有 script 元素都应该放在页面的 head 元素中。这种做法的目的就是把所有外部文件 (css 文件和 <a href=\\"https://so.csdn.net/so/search?q=JavaScript&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JavaScript</a> 文件) 的引用都放在相同的地方。可是，在文档的 head 元素中包含所有 JavaScript 文件，意味着必须等到全部 JavaScript 代码都被下载，解析和执行完成以后，才能开始呈现页面的内容 (浏览器在遇到 body 标签时才开始呈现内容)</p>","autoDesc":true}');export{y as comp,h as data};
