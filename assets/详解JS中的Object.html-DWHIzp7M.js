import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,d as a}from"./app-jr09F59J.js";const i={},l=a(`<h1 id="详解-js-中的-object" tabindex="-1"><a class="header-anchor" href="#详解-js-中的-object"><span>详解 <code>JS</code> 中的 <code>Object</code></span></a></h1><hr><p>从本质上看，<code>Object</code> 是一个构造函数，用于创建对象。</p><h3 id="一、object-构造函数的属性" tabindex="-1"><a class="header-anchor" href="#一、object-构造函数的属性"><span>一、<code>Object</code> 构造函数的属性</span></a></h3><p>在 <code>Object</code> 中声明的属性只有两个：</p><ul><li><code>Object.length</code> —— 值为 1</li><li><code>Object.prototype</code> —— 指向 <code>Object</code> 函数的原型对象</li></ul><h3 id="二、静态方法" tabindex="-1"><a class="header-anchor" href="#二、静态方法"><span>二、静态方法</span></a></h3><p>静态方法就是直接定义在 <code>Object</code> 函数上的方法，注意与实例方法区分！！！调用的方式也不同，直接通过 <code>Object.xxx()</code> 的方式调用。</p><h4 id="object-assign-target-assign" tabindex="-1"><a class="header-anchor" href="#object-assign-target-assign"><span><code>Object.assign(target,...assign)</code></span></a></h4><p>作用：将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。<br> 简单来说，该方法可以接收多个参数，其中第一个参数作为目标对象，剩下的都是源对象。该方法将所有源对象的可枚举属性复制（浅复制）到目标对象中，结果返回目标对象。该方法会直接改变目标对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const target = {name:&quot;jonas&quot;,age:18};</span></span>
<span class="line"><span>const source = {address:&quot;Guangzhou&quot;,gender:&quot;male&quot;}</span></span>
<span class="line"><span>Object.assign(target,source);</span></span>
<span class="line"><span>console.log(target);//{name: &quot;jonas&quot;, age: 18, address: &quot;Guangzhou&quot;, gender: &quot;male&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 <code>ES6</code> 的语法来实现这种需求就很简洁了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let target = {name:&quot;jonas&quot;,age:18};</span></span>
<span class="line"><span>let source = {address:&quot;Guangzhou&quot;,gender:&quot;male&quot;}</span></span>
<span class="line"><span>target = {...target,...source}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三点运算符也是通过浅复制来实现拷贝的。</p><p>注意：如果目标对象中的属性具有相同的键，则属性将被源对象的属性覆盖，后面的源对象的属性将类似地覆盖前面的源对象属性。</p><h4 id="object-create-proto-propertiesobject" tabindex="-1"><a class="header-anchor" href="#object-create-proto-propertiesobject"><span><code>Object.create(proto,propertiesObject)</code></span></a></h4><p>该方法用于创建新对象。第一个参数用于指定新建对象的原型对象；第二个参数是对象的属性描述对象。方法返回新建的对象。</p><p>在默认的情况下，我们通过对象字面量的方式 <code>{}</code> 创建的对象的原型对象就是 <code>Object</code> ，然而，通过该方法就可以指定一个新建对象的原型对象，从而改变原型链的结构。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>function Person() {}</span></span>
<span class="line"><span>Person.prototype.hello = function (){</span></span>
<span class="line"><span>    console.log(&quot;hello&quot;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>let person = Object.create(Person.prototype,{</span></span>
<span class="line"><span>    name:{</span></span>
<span class="line"><span>        value:&quot;jonas&quot;,</span></span>
<span class="line"><span>        writable:true,</span></span>
<span class="line"><span>        configurable:true,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    age:{</span></span>
<span class="line"><span>        value:18,</span></span>
<span class="line"><span>        writable:true,</span></span>
<span class="line"><span>        configurable:true,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>console.log(person)//Person {name: &quot;jonas&quot;, age: 18}</span></span>
<span class="line"><span>person.hello()//hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-defineproperty-obj-prop-desc" tabindex="-1"><a class="header-anchor" href="#object-defineproperty-obj-prop-desc"><span><code>Object.defineProperty(obj,prop,desc)</code></span></a></h4><p>在对象 <code>obj</code> 上定义新的属性，或者修改对象 <code>obj</code> 中的属性，结果返回对象 <code>obj</code>。</p><p>该方法有三个参数，第一个参数 <code>obj</code> 是目标对象，第二个参数 <code>prop</code> 是属性键名，第三个参数是这个属性的描述符。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let person = {}</span></span>
<span class="line"><span>Object.defineProperty(person,&quot;name&quot;,{</span></span>
<span class="line"><span>    value : &quot;jonas&quot;,</span></span>
<span class="line"><span>    writable : true,</span></span>
<span class="line"><span>    enumerable : true,</span></span>
<span class="line"><span>    configurable : true</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>console.log(person)//{name: &quot;jonas&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>害，也许你会感到疑惑，给对象定义属性或修改属性不是直接通过对象字面量的方法更加简洁吗？</p></blockquote><p>是的，如果只是简单的添加或者修改属性，那么必然是对象字面量的方式更为直观。但是，这种方式并不是万能的，在某些场景下就需要使用到这个方法。</p><p>比如，在 <code>Vue</code> 的底层实现数据绑定中就使用到了这个方法。</p><p>扩展：属性描述符有两种：</p><ul><li>数据描述符。具有值的属性。</li><li>存取描述符。由 <code>getter</code> 和 <code>setter</code> 函数对属性的描述。</li></ul><p>一个属性只能是其中的一种描述符。</p><p>描述符通用属性：</p><ul><li><code>configurable</code> —— 布尔值，默认值为 <code>false</code> 。若值为 <code>true</code>，则表示这个属性描述符可以被改变，同时该属性也能从对象上删除。</li><li><code>enumerable</code> —— 布尔值，默认值为 <code>false</code>。表示是否能枚举</li></ul><p>数据描述符特有的属性：</p><ul><li><code>value</code> —— 该属性的值，默认值为 <code>undefined</code></li><li><code>writable</code> —— 布尔值，默认值为 <code>false</code>，表示是否能重写。</li></ul><p>存取描述符特有的属性：</p><ul><li><code>get:function</code> —— 默认值为 <code>undefined</code>，当访问该属性时，该方法会被执行。</li><li><code>set:function</code> —— 默认值为 <code>undefined</code>，当属性修改时，触发执行改方法，该方法接收一个参数，就是该属性新的值。</li></ul><h4 id="object-entries-obj" tabindex="-1"><a class="header-anchor" href="#object-entries-obj"><span><code>Object.entries(obj)</code></span></a></h4><p>该方法返回对象 <code>obj</code> 自身的可枚举属性的键值对数组。结果是一个二维数组，数组中的元素是一个由两个元素 <code>key</code> ，<code>value</code> 组成的数组。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let person = {name:&quot;jonas&quot;,age:18}</span></span>
<span class="line"><span>let arr = Object.entries(person)</span></span>
<span class="line"><span>console.log(arr)//[[&quot;name&quot;, &quot;jonas&quot;],[&quot;age&quot;, 18]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法的使用场景是：将普通的对象转换为 <code>Map</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let person = {name:&quot;jonas&quot;,age:18}</span></span>
<span class="line"><span>let map = new Map(Object.entries(person))</span></span>
<span class="line"><span>console.log(map)//Map(2) {&quot;name&quot; =&gt; &quot;jonas&quot;, &quot;age&quot; =&gt; 18}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相似的，还有两个方法可以取出对象的键名或键值：</p><ul><li><code>Object.keys(obj)</code> —— 返回一个对象中的可枚举属性组成的数组</li><li><code>Object.values(obj)</code> —— 返回一个对象中的可枚举属性值组成的数组。</li></ul><h4 id="object-freeze-obj" tabindex="-1"><a class="header-anchor" href="#object-freeze-obj"><span><code>Object.freeze(obj)</code></span></a></h4><p>该方法用于冻结对象，一个被冻结的对象不能被修改，不能添加新的属性，不能修改属性的描述符，该对象的原型对象也不能修改。返回值为被冻结的对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let person = {name:&quot;jonas&quot;,age:18}</span></span>
<span class="line"><span>Object.freeze(person)</span></span>
<span class="line"><span>person.address = &quot;Guangzhou&quot;</span></span>
<span class="line"><span>person.age = 20</span></span>
<span class="line"><span>console.log(person)//{name: &quot;jonas&quot;, age: 18}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-getownpropertydescriptor-obj-prop" tabindex="-1"><a class="header-anchor" href="#object-getownpropertydescriptor-obj-prop"><span><code>Object.getOwnPropertyDescriptor(obj,prop)</code></span></a></h4><p>该方法用于返回指定对象上自有属性对应的属性描述符。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let obj = {}</span></span>
<span class="line"><span>Object.defineProperty(obj,&quot;name&quot;,{</span></span>
<span class="line"><span>    configurable:false,</span></span>
<span class="line"><span>    enumerable:true,</span></span>
<span class="line"><span>    writable:true,</span></span>
<span class="line"><span>    value:&quot;Jonas&quot;</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>let descriptor = Object.getOwnPropertyDescriptor(obj,&quot;name&quot;)</span></span>
<span class="line"><span>console.log(descriptor)//{value: &quot;Jonas&quot;, writable: true, enumerable: true, configurable: false}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-getownpropertynames-obj" tabindex="-1"><a class="header-anchor" href="#object-getownpropertynames-obj"><span><code>Object.getOwnPropertyNames(obj)</code></span></a></h4><p>该方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 <code>Symbol</code> 作为键名的属性）组成的数组。</p><p>该方法包含的范围比 <code>Object.keys()</code> 广。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let obj = {}</span></span>
<span class="line"><span>Object.defineProperty(obj,&quot;name&quot;,{</span></span>
<span class="line"><span>    configurable:false,</span></span>
<span class="line"><span>    enumerable:false,</span></span>
<span class="line"><span>    writable:true,</span></span>
<span class="line"><span>    value:&quot;Jonas&quot;</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>Object.defineProperty(obj,Symbol(),{</span></span>
<span class="line"><span>    configurable:false,</span></span>
<span class="line"><span>    enumerable:false,</span></span>
<span class="line"><span>    writable:true,</span></span>
<span class="line"><span>    value: 18</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>let arr = Object.getOwnPropertyNames(obj)</span></span>
<span class="line"><span>console.log(arr)//[&quot;name&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-getownpropertysymbols-obj" tabindex="-1"><a class="header-anchor" href="#object-getownpropertysymbols-obj"><span><code>Object.getOwnPropertySymbols(obj)</code></span></a></h4><p>该方法返回一个指定对象自身所有的 <code>Symbol</code> 键名的属性的数组。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let obj = {}</span></span>
<span class="line"><span>Object.defineProperty(obj,&quot;name&quot;,{</span></span>
<span class="line"><span>    configurable:false,</span></span>
<span class="line"><span>    enumerable:false,</span></span>
<span class="line"><span>    writable:true,</span></span>
<span class="line"><span>    value:&quot;Jonas&quot;</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>Object.defineProperty(obj,Symbol(),{</span></span>
<span class="line"><span>    configurable:false,</span></span>
<span class="line"><span>    enumerable:false,</span></span>
<span class="line"><span>    writable:true,</span></span>
<span class="line"><span>    value: 18</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>let arr = Object.getOwnPropertySymbols(obj)</span></span>
<span class="line"><span>console.log(arr)//[Symbol()]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-getprototypeof-obj" tabindex="-1"><a class="header-anchor" href="#object-getprototypeof-obj"><span><code>Object.getPrototypeOf(obj)</code></span></a></h4><p>该方法返回指定对象的原型对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>function Person() {}</span></span>
<span class="line"><span>Person.prototype.hello = function () {</span></span>
<span class="line"><span>    console.log(&quot;hello&quot;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>let person = new Person()</span></span>
<span class="line"><span>let proto = Object.getPrototypeOf(person)</span></span>
<span class="line"><span>proto.hello()//hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-is-obj1-obj2" tabindex="-1"><a class="header-anchor" href="#object-is-obj1-obj2"><span><code>Object.is(obj1,obj2)</code></span></a></h4><p>该方法用于比较两个对象是否相同，返回布尔值。</p><p>比较规则如下：</p><ul><li>如果两个值都是 <code>undefined</code> ，则返回 <code>true</code></li><li>如果两个值都是 <code>null</code>，则返回 <code>true</code></li><li>如果两个值都是 <code>true</code> 或 <code>false</code> ，则返回 <code>true</code></li><li>如果两个值都是由相同个数的字符按照相同的顺序组成的字符串，则返回 <code>true</code></li><li>如果两个值指向同一个对象，则返回 <code>true</code></li><li>如果两个值都是 <code>+0</code> ,<code>-0</code>，<code>NaN</code>，则返回 <code>true</code></li></ul><p>注意：该方法不会做隐式类型转换。</p><h4 id="object-isextensible-obj" tabindex="-1"><a class="header-anchor" href="#object-isextensible-obj"><span><code>Object.isExtensible(obj)</code></span></a></h4><p>该方法用于判断一个对象是否可以扩展（是否可以添加属性），返回布尔值。</p><p>在默认的情况下，对象是允许扩展的（无论是通过对象构造函数还是对象字面量方式创建的对象）。封闭对象，冻结对象是不可扩展的！！！</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let obj = {}</span></span>
<span class="line"><span>Object.freeze(obj)</span></span>
<span class="line"><span>console.log(Object.isExtensible(obj))//false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要将一个对象设置为禁止扩展的对象，那么可以使用 <code>Object.preventExtensions(obj)</code>。</p><h4 id="object-isfrozen-obj" tabindex="-1"><a class="header-anchor" href="#object-isfrozen-obj"><span><code>Object.isFrozen(obj)</code></span></a></h4><p>判断对象是否被冻结。返回布尔值。</p><h4 id="object-seal-obj" tabindex="-1"><a class="header-anchor" href="#object-seal-obj"><span><code>Object.seal(obj)</code></span></a></h4><p>封闭对象，阻止添加新属性并将所有的属性标记为不可配置！</p><h3 id="三、实例方法" tabindex="-1"><a class="header-anchor" href="#三、实例方法"><span>三、实例方法</span></a></h3><p>在 <code>JS</code> 中，所有的对象都是来自 <code>Object</code>，所有对象从 <code>Object.prototype</code> 中集成方法和属性，尽管它们可能被覆盖。<code>Object</code> 的原型对象中也定义着一些方法，但是有一部分已经遗弃了，下面展示几个还在使用的：</p><ul><li><code>Object.prototype.hasOwnProperty(prop)</code> —— 检测指定对象的自身中是否具有指定的属性，返回布尔值。</li><li><code>Object.prototype.toString()</code> —— 返回对象的字符串形式。</li><li><code>Object.prototype.valueOf()</code> —— 返回对象本身。</li><li><code>Object.prototype.isPrototypeOf(obj)</code> —— 检测对象是否在另一个对象的原型链上，返回布尔值。</li></ul>`,75),o=[l];function t(c,p){return n(),s("div",null,o)}const b=e(i,[["render",t],["__file","详解JS中的Object.html.vue"]]),u=JSON.parse('{"path":"/study/7.Javascript/%E8%AF%A6%E8%A7%A3JS%E4%B8%AD%E7%9A%84Object.html","title":"详解 JS 中的 Object","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-09-11T00:00:00.000Z","category":["JavaScript"],"tag":["JavaScript","Object"],"description":"详解 JS 中的 Object 从本质上看，Object 是一个构造函数，用于创建对象。 一、Object 构造函数的属性 在 Object 中声明的属性只有两个： Object.length —— 值为 1 Object.prototype —— 指向 Object 函数的原型对象 二、静态方法 静态方法就是直接定义在 Object 函数上的方法，注...","head":[["meta",{"property":"og:url","content":"https://github.com/tommmmya/Tommya-Blog/study/7.Javascript/%E8%AF%A6%E8%A7%A3JS%E4%B8%AD%E7%9A%84Object.html"}],["meta",{"property":"og:site_name","content":"Tommya 个人博客"}],["meta",{"property":"og:title","content":"详解 JS 中的 Object"}],["meta",{"property":"og:description","content":"详解 JS 中的 Object 从本质上看，Object 是一个构造函数，用于创建对象。 一、Object 构造函数的属性 在 Object 中声明的属性只有两个： Object.length —— 值为 1 Object.prototype —— 指向 Object 函数的原型对象 二、静态方法 静态方法就是直接定义在 Object 函数上的方法，注..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T07:56:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Tommya"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:tag","content":"Object"}],["meta",{"property":"article:published_time","content":"2023-09-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T07:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"详解 JS 中的 Object\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-29T07:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Tommya\\",\\"url\\":\\"https://github.com/tommmmya\\"}]}"]]},"headers":[{"level":3,"title":"一、Object 构造函数的属性","slug":"一、object-构造函数的属性","link":"#一、object-构造函数的属性","children":[]},{"level":3,"title":"二、静态方法","slug":"二、静态方法","link":"#二、静态方法","children":[]},{"level":3,"title":"三、实例方法","slug":"三、实例方法","link":"#三、实例方法","children":[]}],"git":{"createdTime":1728989573000,"updatedTime":1730188564000,"contributors":[{"name":"tangmao02","email":"tangmao02@meituan.com","commits":2}]},"readingTime":{"minutes":6.4,"words":1921},"filePathRelative":"study/7.Javascript/详解JS中的Object.md","localizedDate":"2023年9月11日","excerpt":"\\n<hr>\\n<p>从本质上看，<code>Object</code> 是一个构造函数，用于创建对象。</p>\\n<h3>一、<code>Object</code> 构造函数的属性</h3>\\n<p>在 <code>Object</code> 中声明的属性只有两个：</p>\\n<ul>\\n<li><code>Object.length</code> —— 值为 1</li>\\n<li><code>Object.prototype</code> —— 指向 <code>Object</code> 函数的原型对象</li>\\n</ul>\\n<h3>二、静态方法</h3>\\n<p>静态方法就是直接定义在 <code>Object</code> 函数上的方法，注意与实例方法区分！！！调用的方式也不同，直接通过 <code>Object.xxx()</code> 的方式调用。</p>","autoDesc":true}');export{b as comp,u as data};
