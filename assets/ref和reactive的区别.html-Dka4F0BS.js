import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as r,d as a}from"./app-jr09F59J.js";const o={},c=a('<h1 id="ref-和-reactive-的区别" tabindex="-1"><a class="header-anchor" href="#ref-和-reactive-的区别"><span>ref 和 reactive 的区别</span></a></h1><p><strong>理解：</strong><br> 1.ref 是定义简单类型 和单一的对象<br> 2.reactive 定义复杂的类型</p><p><strong>梳理文档：</strong><br> ref 和 reactive 都是 Vue.js 3.x 版本中新增的<a href="https://so.csdn.net/so/search?q=%E5%93%8D%E5%BA%94%E5%BC%8F&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">响应式</a> API，用于实现组件的数据响应式更新。它们的主要区别如下：</p><ol><li>数据类型不同：ref 用于包装 JavaScript 基本类型的数据（如字符串、数字、布尔值等），而 reactive 可以用于包装 JavaScript 对象和数组等复杂类型的数据。</li><li>使用方式不同：ref 需要通过在模板中使用 ref 指令以及在 JavaScript 代码中使用 ref 函数进行创建和使用，而 reactive 则需要通过调用 Vue.js 提供的 reactive 函数进行包装和创建。</li><li>访问方式不同：对于通过 ref 函数创建的响应式数据，我们可以通过. value 属性来访问其实际值；而对于通过 reactive 函数创建的响应式对象，我们可以直接访问其属性或调用其方法。</li><li>设计理念不同：ref 主要是为了解决单一元素 / 数据的响应式问题，而 reactive 则是为了解决 JavaScript 对象和数组等复杂数据结构的响应式问题。</li></ol><p>总的来说，ref 和 reactive 都是用于实现 Vue.js 组件的数据响应式更新，但是它们的使用方法、适用范围和设计理念等方面略有不同，需要根据具体的应用场景选择合适的 API 进行使用。</p>',5),i=[c];function n(p,m){return r(),t("div",null,i)}const f=e(o,[["render",n],["__file","ref和reactive的区别.html.vue"]]),v=JSON.parse('{"path":"/study/3.Vue/ref%E5%92%8Creactive%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"ref 和 reactive 的区别","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-11-08T00:00:00.000Z","category":["Vue"],"tag":["vue","ref","reactive"],"description":"ref 和 reactive 的区别 理解： 1.ref 是定义简单类型 和单一的对象 2.reactive 定义复杂的类型 梳理文档： ref 和 reactive 都是 Vue.js 3.x 版本中新增的响应式 API，用于实现组件的数据响应式更新。它们的主要区别如下： 数据类型不同：ref 用于包装 JavaScript 基本类型的数据（如字符串...","head":[["meta",{"property":"og:url","content":"https://github.com/tommmmya/Tommya-Blog/study/3.Vue/ref%E5%92%8Creactive%E7%9A%84%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"Tommya 个人博客"}],["meta",{"property":"og:title","content":"ref 和 reactive 的区别"}],["meta",{"property":"og:description","content":"ref 和 reactive 的区别 理解： 1.ref 是定义简单类型 和单一的对象 2.reactive 定义复杂的类型 梳理文档： ref 和 reactive 都是 Vue.js 3.x 版本中新增的响应式 API，用于实现组件的数据响应式更新。它们的主要区别如下： 数据类型不同：ref 用于包装 JavaScript 基本类型的数据（如字符串..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T07:56:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Tommya"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:tag","content":"ref"}],["meta",{"property":"article:tag","content":"reactive"}],["meta",{"property":"article:published_time","content":"2023-11-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T07:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ref 和 reactive 的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-29T07:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Tommya\\",\\"url\\":\\"https://github.com/tommmmya\\"}]}"]]},"headers":[],"git":{"createdTime":1728989573000,"updatedTime":1730188564000,"contributors":[{"name":"tangmao02","email":"tangmao02@meituan.com","commits":2}]},"readingTime":{"minutes":1.38,"words":414},"filePathRelative":"study/3.Vue/ref和reactive的区别.md","localizedDate":"2023年11月8日","excerpt":"\\n<p><strong>理解：</strong><br>\\n1.ref 是定义简单类型 和单一的对象<br>\\n2.reactive 定义复杂的类型</p>\\n<p><strong>梳理文档：</strong><br>\\nref 和 reactive 都是 Vue.js 3.x 版本中新增的<a href=\\"https://so.csdn.net/so/search?q=%E5%93%8D%E5%BA%94%E5%BC%8F&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">响应式</a> API，用于实现组件的数据响应式更新。它们的主要区别如下：</p>","autoDesc":true}');export{f as comp,v as data};
