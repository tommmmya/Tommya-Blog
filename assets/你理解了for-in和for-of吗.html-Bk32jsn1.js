import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-jr09F59J.js";const i={},r=e(`<h1 id="你理解了for-in和for-of吗" tabindex="-1"><a class="header-anchor" href="#你理解了for-in和for-of吗"><span>你理解了for-in和for-of吗</span></a></h1><p>【前言】</p><p>在 JavaScript 中，for 循环语句是编写复杂程序时经常使用的一种工具。其中，for-in 和 for-of 是两个最常用的变体。尽管这两者非常相似，但它们在迭代对象方面有所不同。在本文中，我们将探讨 for-in 和 for-of 的不同之处，以及如何正确使用它们。</p><p>【正文】</p><h3 id="一、for-in-循环" tabindex="-1"><a class="header-anchor" href="#一、for-in-循环"><span>一、for-in 循环</span></a></h3><p>for-in 循环是一种迭代对象属性的方法。它可以用于<a href="https://so.csdn.net/so/search?q=%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">遍历对象</a>中的所有可枚举属性，包括从原型链继承的属性。通常，我们使用 for-in 循环来遍历对象的键名。</p><p>下面是一个简单的例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const person = {</span></span>
<span class="line"><span>  name: &#39;John&#39;,</span></span>
<span class="line"><span>  age: 30,</span></span>
<span class="line"><span>  gender: &#39;male&#39;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>for (const key in person) {</span></span>
<span class="line"><span>  console.log(key, person[key]);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 for-in 循环遍历了 person 对象的所有键名。输出结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>name John</span></span>
<span class="line"><span>age 30</span></span>
<span class="line"><span>gender male</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，for-in 循环并不是按照对象属性在对象中的顺序迭代的。这是因为 JavaScript 中的对象属性没有固定的顺序。因此，我们在使用 for-in 循环迭代对象时，不能保证它们的顺序。</p><p>另外，由于 for-in 循环会遍历对象的<a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%9E%8B%E9%93%BE&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">原型链</a>，因此可能会迭代到不是自身属性的属性。为了避免这种情况，我们可以使用 hasOwnProperty 方法来检查属性是否为对象自身的属性。</p><p>下面是一个使用 hasOwnProperty 的例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const person = {</span></span>
<span class="line"><span>  name: &#39;John&#39;,</span></span>
<span class="line"><span>  age: 30,</span></span>
<span class="line"><span>  gender: &#39;male&#39;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>for (const key in person) {</span></span>
<span class="line"><span>  if (person.hasOwnProperty(key)) {</span></span>
<span class="line"><span>    console.log(key, person[key]);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 hasOwnProperty 方法来检查属性是否为 person 对象自身的属性。输出结果与之前相同。</p><h3 id="二、for-of-循环" tabindex="-1"><a class="header-anchor" href="#二、for-of-循环"><span>二、for-of 循环</span></a></h3><p>for-of 循环是一种迭代可迭代对象的方法。它可以用于遍历数组、字符串、Map、Set、TypedArray 等可迭代对象。通常，我们使用 for-of 循环来遍历数组或字符串的值。</p><p>下面是一个简单的例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const arr = [1, 2, 3];</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>for (const value of arr) {</span></span>
<span class="line"><span>  console.log(value);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 for-of 循环遍历了数组 arr 的所有值。输出结果如下：</p><p>需要注意的是，for-of 循环不适用于迭代对象属性。如果我们尝试使用 for-of 循环迭代对象，将会抛出 TypeError 异常。</p><p>下面是一个尝试使用 for-of 循环迭代对象的例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const person = {</span></span>
<span class="line"><span>  name: &#39;John&#39;,</span></span>
<span class="line"><span>  age: 30,</span></span>
<span class="line"><span>  gender: &#39;male&#39;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>for (const value of person) {</span></span>
<span class="line"><span>  console.log(value);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们尝试使用 for-of 循环迭代对象 person，但会抛出 TypeError 异常。</p><h3 id="三、for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#三、for-in-和-for-of-的区别"><span>三、for-in 和 for-of 的区别</span></a></h3><p>for-in 循环和 for-of 循环虽然都是用于迭代对象的方法，但它们有一些不同之处。</p><ol><li>迭代对象的内容不同</li></ol><p>for-in 循环迭代对象的是键名，而 for-of 循环迭代对象的是值。因此，for-in 循环适用于迭代对象的键名，而 for-of 循环适用于迭代对象的值。</p><ol start="2"><li>迭代对象的类型不同</li></ol><p>for-in 循环适用于遍历对象，包括普通对象、数组、函数等，而 for-of 循环适用于遍历可迭代对象，包括数组、字符串、Map、Set、TypedArray 等。</p><ol start="3"><li>迭代对象的顺序不同</li></ol><p>for-in 循环的迭代顺序是不确定的，因为对象的属性没有固定的顺序。而 for-of 循环的迭代顺序是确定的，因为可迭代对象的值是按照一定顺序排列的。</p><ol start="4"><li>迭代对象的原理不同</li></ol><p>for-in 循环遍历对象时，会遍历对象的原型链，并且会包含从<a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">原型链继承</a>的属性。而 for-of 循环遍历的对象是可迭代对象，它们的值是可枚举的。</p><h3 id="四、如何选择合适的循环方法" tabindex="-1"><a class="header-anchor" href="#四、如何选择合适的循环方法"><span>四、如何选择合适的循环方法</span></a></h3><p>在选择使用 for-in 循环还是 for-of 循环时，我们需要考虑对象的类型以及我们需要迭代的内容。通常，如果我们需要迭代对象的键名，我们可以使用 for-in 循环；如果我们需要迭代对象的值，我们可以使用 for-of 循环。</p><p>另外，当我们需要遍历数组或字符串时，我们可以使用 for-of 循环，因为它可以提供更好的性能和可读性。相比之下，for-in 循环会遍历对象的原型链，会导致性能下降。</p><p>如果我们需要遍历一个对象，同时又需要过滤掉从原型链继承的属性，我们可以使用 hasOwnProperty 方法进行过滤。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const person = {</span></span>
<span class="line"><span>  name: &#39;John&#39;,</span></span>
<span class="line"><span>  age: 30,</span></span>
<span class="line"><span>  gender: &#39;male&#39;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>for (const key in person) {</span></span>
<span class="line"><span>  if (person.hasOwnProperty(key)) {</span></span>
<span class="line"><span>    console.log(key, person[key]);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结"><span>五、总结</span></a></h3><p>for-in 循环和 for-of 循环是 JavaScript 中用于迭代对象的两种方法。它们的区别在于迭代对象的内容、类型、顺序和原理。通常，我们应该根据需要选择合适的循环方法，以提高效的迭代对象。</p><p>同时，我们也需要注意到 for-in 循环的一些缺陷。由于它会遍历对象的原型链，导致性能下降，而且不能保证迭代顺序，所以我们应该避免在数组和字符串上使用 for-in 循环。</p><p>最后，我们还可以使用其他一些方法来迭代对象，例如 forEach 方法、map 方法、reduce 方法等。这些方法不仅可以提供更好的性能和可读性，还可以通过回调函数来实现更加灵活的操作。</p><p>总的来说，for-in 循环和 for-of 循环都是 JavaScript 中用于迭代对象的重要方法。我们需要根据对象的类型和需要迭代的内容来选择合适的循环方法，以提高代码的性能和可读性。同时，我们也需要注意 for-in 循环的缺陷，并且学会使用其他方法来迭代对象，以实现更加灵活和高效的操作。</p>`,44),p=[r];function o(l,t){return a(),s("div",null,p)}const f=n(i,[["render",o],["__file","你理解了for-in和for-of吗.html.vue"]]),h=JSON.parse('{"path":"/study/7.Javascript/%E4%BD%A0%E7%90%86%E8%A7%A3%E4%BA%86for-in%E5%92%8Cfor-of%E5%90%97.html","title":"你理解了for-in和for-of吗","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-07-12T00:00:00.000Z","category":["JavaScript"],"tag":["JavaScript","for in","for of"],"description":"你理解了for-in和for-of吗 【前言】 在 JavaScript 中，for 循环语句是编写复杂程序时经常使用的一种工具。其中，for-in 和 for-of 是两个最常用的变体。尽管这两者非常相似，但它们在迭代对象方面有所不同。在本文中，我们将探讨 for-in 和 for-of 的不同之处，以及如何正确使用它们。 【正文】 一、for-in...","head":[["meta",{"property":"og:url","content":"https://github.com/tommmmya/Tommya-Blog/study/7.Javascript/%E4%BD%A0%E7%90%86%E8%A7%A3%E4%BA%86for-in%E5%92%8Cfor-of%E5%90%97.html"}],["meta",{"property":"og:site_name","content":"Tommya 个人博客"}],["meta",{"property":"og:title","content":"你理解了for-in和for-of吗"}],["meta",{"property":"og:description","content":"你理解了for-in和for-of吗 【前言】 在 JavaScript 中，for 循环语句是编写复杂程序时经常使用的一种工具。其中，for-in 和 for-of 是两个最常用的变体。尽管这两者非常相似，但它们在迭代对象方面有所不同。在本文中，我们将探讨 for-in 和 for-of 的不同之处，以及如何正确使用它们。 【正文】 一、for-in..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T07:56:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Tommya"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:tag","content":"for in"}],["meta",{"property":"article:tag","content":"for of"}],["meta",{"property":"article:published_time","content":"2023-07-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T07:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"你理解了for-in和for-of吗\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-29T07:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Tommya\\",\\"url\\":\\"https://github.com/tommmmya\\"}]}"]]},"headers":[{"level":3,"title":"一、for-in 循环","slug":"一、for-in-循环","link":"#一、for-in-循环","children":[]},{"level":3,"title":"二、for-of 循环","slug":"二、for-of-循环","link":"#二、for-of-循环","children":[]},{"level":3,"title":"三、for-in 和 for-of 的区别","slug":"三、for-in-和-for-of-的区别","link":"#三、for-in-和-for-of-的区别","children":[]},{"level":3,"title":"四、如何选择合适的循环方法","slug":"四、如何选择合适的循环方法","link":"#四、如何选择合适的循环方法","children":[]},{"level":3,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}],"git":{"createdTime":1728989573000,"updatedTime":1730188564000,"contributors":[{"name":"tangmao02","email":"tangmao02@meituan.com","commits":2}]},"readingTime":{"minutes":5.3,"words":1590},"filePathRelative":"study/7.Javascript/你理解了for-in和for-of吗.md","localizedDate":"2023年7月12日","excerpt":"\\n<p>【前言】</p>\\n<p>在 JavaScript 中，for 循环语句是编写复杂程序时经常使用的一种工具。其中，for-in 和 for-of 是两个最常用的变体。尽管这两者非常相似，但它们在迭代对象方面有所不同。在本文中，我们将探讨 for-in 和 for-of 的不同之处，以及如何正确使用它们。</p>\\n<p>【正文】</p>\\n<h3>一、for-in 循环</h3>\\n<p>for-in 循环是一种迭代对象属性的方法。它可以用于<a href=\\"https://so.csdn.net/so/search?q=%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">遍历对象</a>中的所有可枚举属性，包括从原型链继承的属性。通常，我们使用 for-in 循环来遍历对象的键名。</p>","autoDesc":true}');export{f as comp,h as data};
