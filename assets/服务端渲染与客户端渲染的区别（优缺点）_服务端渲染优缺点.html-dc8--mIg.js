import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o,d as r}from"./app-jr09F59J.js";const m={},n=r('<h1 id="服务端渲染与客户端渲染的区别" tabindex="-1"><a class="header-anchor" href="#服务端渲染与客户端渲染的区别"><span>服务端渲染与客户端渲染的区别</span></a></h1><p><em><strong>服务器端渲染？</strong></em><br> 互联网早期，用户使用的浏览器浏览的都是一些没有复杂逻辑的、简单的页面，这些页面都是在后端将 html 拼接好的，然后返回给前端完整的 html 文件，浏览器拿到这个 html 文件之后就可以直接解析展示了，这也就是所谓的服务器端渲染。<br><em><strong>客户端渲染？</strong></em><br> 而随着前端页面的复杂性提高，前端就不仅仅是普通的页面展示了，可能是添加更多功能的组件，复杂性更大，另外，此时 ajax 的兴起，使得页面就开始崇拜前后端分离的开发模式，即后端不提供完整的 html 页面，而是提供一些 api 使得前端可以获取 json 数据，然后前端拿到 json 数据之后再在前端进行 html 页面的拼接，然后展示在浏览器上，这就是所谓的客户端渲染<br> 客户端渲染和服务器端渲染的最重要的区别就是究竟是谁来完成 html 文件的完整拼接<br><em><strong>服务器端渲染的优缺点是？</strong></em><br><em><strong>优点：</strong></em></p><ol><li>前端耗时少。因为后端拼接完了 html，浏览器只需要直接渲染出来。</li><li>有利于 SEO。因为在后端有完整的 html 页面，所以爬虫更容易爬取获得信息，更有利于 seo。</li><li>无需占用客户端资源。即解析模板的工作完全交由后端来做，客户端只要解析标准的 html 页面即可，这样对于客户端的资源占用更少，尤其是移动端，也可以更省电。</li><li>后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 。<br><em><strong>缺点：</strong></em></li><li>不利于前后端分离，开发效率低。<br> 使用服务器端渲染，则无法进行分工合作，则对于前端复杂度高的项目，不利于项目高效开发。另外，如果是服务器端渲染，则前端一般就是写一个静态 html 文件，然后后端再修改为模板，这样是非常低效的，并且还常常需要前后端共同完成修改的动作； 或者是前端直接完成 html 模板，然后交由后端。另外，如果后端改了模板，前端还需要根据改动的模板再调节 css，这样使得前后端联调的时间增加。</li><li>占用服务器端资源。<br> 即服务器端完成 html 模板的解析，如果请求较多，会对服务器造成一定的访问压力。而如果使用前端渲染，就是把这些解析的压力分摊了前端，而这里确实完全交给了一个服务器。<br><em><strong>客户端渲染的优缺点是？</strong></em><br><em><strong>优点</strong></em>：</li><li>前后端分离。前端专注于前端 UI，后端专注于 api 开发，且前端有更多的选择性，而不需要遵循后端特定的模板。</li><li>体验更好。比如，我们将网站做成 SPA 或者部分内容做成 SPA，这样，尤其是移动端，可以使体验更接近于原生 app。<br><em><strong>缺点：</strong></em></li><li>前端响应较慢。如果是客户端渲染，前端还要进行拼接字符串的过程，需要耗费额外的时间，不如服务器端渲染速度快。</li><li>不利于 SEO。目前比如百度、谷歌的爬虫对于 SPA 都是不认的，只是记录了一个页面，所以 SEO 很差。因为服务器端可能没有保存完整的 html，而是前端通过 js 进行 dom 的拼接，那么爬虫无法爬取信息。 除非搜索引擎的 seo 可以增加对于 JavaScript 的爬取能力，这才能保证 seo。<br><em><strong>使用服务器端渲染还是客户端渲染？</strong></em><br> 不谈业务场景而盲目选择使用何种渲染方式都是耍流氓。比如企业级网站，主要功能是展示而没有复杂的交互，并且需要良好的 SEO，则这时我们就需要使用服务器端渲染；而类似后台管理页面，交互性比较强，不需要 seo 的考虑，那么就可以使用客户端渲染。<br> 另外，具体使用何种渲染方法并不是绝对的，比如现在一些网站采用了首屏服务器端渲染，即对于用户最开始打开的那个页面采用的是服务器端渲染，这样就保证了渲染速度，而其他的页面采用客户端渲染，这样就完成了前后端分离。</li></ol>',3),a=[n];function l(s,i){return o(),e("div",null,a)}const c=t(m,[["render",l],["__file","服务端渲染与客户端渲染的区别（优缺点）_服务端渲染优缺点.html.vue"]]),B=JSON.parse('{"path":"/study/5.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%89_%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E4%BC%98%E7%BC%BA%E7%82%B9.html","title":"服务端渲染与客户端渲染的区别","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-01-23T00:00:00.000Z","category":["计算机网络"],"tag":["计算机网络"],"description":"服务端渲染与客户端渲染的区别 服务器端渲染？ 互联网早期，用户使用的浏览器浏览的都是一些没有复杂逻辑的、简单的页面，这些页面都是在后端将 html 拼接好的，然后返回给前端完整的 html 文件，浏览器拿到这个 html 文件之后就可以直接解析展示了，这也就是所谓的服务器端渲染。 客户端渲染？ 而随着前端页面的复杂性提高，前端就不仅仅是普通的页面展示了...","head":[["meta",{"property":"og:url","content":"https://github.com/tommmmya/Tommya-Blog/study/5.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%89_%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E4%BC%98%E7%BC%BA%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"Tommya 个人博客"}],["meta",{"property":"og:title","content":"服务端渲染与客户端渲染的区别"}],["meta",{"property":"og:description","content":"服务端渲染与客户端渲染的区别 服务器端渲染？ 互联网早期，用户使用的浏览器浏览的都是一些没有复杂逻辑的、简单的页面，这些页面都是在后端将 html 拼接好的，然后返回给前端完整的 html 文件，浏览器拿到这个 html 文件之后就可以直接解析展示了，这也就是所谓的服务器端渲染。 客户端渲染？ 而随着前端页面的复杂性提高，前端就不仅仅是普通的页面展示了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T07:56:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Tommya"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:published_time","content":"2024-01-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T07:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"服务端渲染与客户端渲染的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-29T07:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Tommya\\",\\"url\\":\\"https://github.com/tommmmya\\"}]}"]]},"headers":[],"git":{"createdTime":1728989573000,"updatedTime":1730188564000,"contributors":[{"name":"tangmao02","email":"tangmao02@meituan.com","commits":2}]},"readingTime":{"minutes":4.19,"words":1258},"filePathRelative":"study/5.计算机网络/服务端渲染与客户端渲染的区别（优缺点）_服务端渲染优缺点.md","localizedDate":"2024年1月23日","excerpt":"\\n<p><em><strong>服务器端渲染？</strong></em><br>\\n互联网早期，用户使用的浏览器浏览的都是一些没有复杂逻辑的、简单的页面，这些页面都是在后端将 html 拼接好的，然后返回给前端完整的 html 文件，浏览器拿到这个 html 文件之后就可以直接解析展示了，这也就是所谓的服务器端渲染。<br>\\n<em><strong>客户端渲染？</strong></em><br>\\n而随着前端页面的复杂性提高，前端就不仅仅是普通的页面展示了，可能是添加更多功能的组件，复杂性更大，另外，此时 ajax 的兴起，使得页面就开始崇拜前后端分离的开发模式，即后端不提供完整的 html 页面，而是提供一些 api 使得前端可以获取 json 数据，然后前端拿到 json 数据之后再在前端进行 html 页面的拼接，然后展示在浏览器上，这就是所谓的客户端渲染<br>\\n客户端渲染和服务器端渲染的最重要的区别就是究竟是谁来完成 html 文件的完整拼接<br>\\n<em><strong>服务器端渲染的优缺点是？</strong></em><br>\\n<em><strong>优点：</strong></em></p>","autoDesc":true}');export{c as comp,B as data};
